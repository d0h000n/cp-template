{
	"Generate default CP template" : {
		"prefix": "start",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std; using ii = pair<int,int>; using ll = long long; using vi = vector<int>;",
			"#define rep(i,a,b) for (auto i = (a); i <= (b); ++i)",
			"#define per(i,a,b) for (auto i = (b); i >= (a); --i)",
			"#define all(x) begin(x), end(x)",
			"#define siz(x) int((x).size())",
			"#define Mup(x,y) x = max(x,y)",
			"#define mup(x,y) x = min(x,y)",
			"#define fi first",
			"#define se second",
			"#define dbg(...) fprintf(stderr,__VA_ARGS__)",
			"",
			"int main() {",
			"    $0",
			"}"
		]
	},
	
	"Random functions template" : {
		"prefix": "rnd",
		"body": [
			"mt19937 rng(random_device{}());",
			"#define my_random(l,r) uniform_int_distribution<ll>(l,r)(rng)",
			"#define my_shuffle(...) shuffle(__VA_ARGS__,rng)"
		]
	},
	
	"Strongly Connected Component - Tarjan's algorithm": {
		"prefix": "scc",
		"body": [
		  "namespace scc {",
		  "    int num, of[N], in[N], out[N];",
		  "    vector<int> nodes[N], cdj[N];",
		  "    int t, ord[N]; stack<int> stk; bool vis[N];",
		  "    int tarjan(int s) {",
		  "        if (vis[s]) return of[s] ? 1e9 : ord[s];",
		  "        vis[s] = true, stk.push(s);",
		  "        int r = ord[s] = ++t;",
		  "        for (auto u : adj[s]) mup(r, tarjan(u));",
		  "        if (r == ord[s]) {",
		  "            ++num; int u;",
		  "            do {",
		  "                u = stk.top(), stk.pop()",
		  "                nodes[of[u] = num].push_back(u);",
		  "            } while (u != s);",
		  "        }",
		  "        return r;",
		  "    }",
		  "    void build() {",
		  "        rep(u,1,n) tarjan(u);",
		  "        rep(u,1,n) for (auto v : adj[u]) {",
		  "            if (of[u] != of[v]) {",
		  "                in[of[v]]++, out[of[u]]++;",
		  "                cdj[of[u]].push_back(of[v]);",
		  "            }",
		  "        }",
		  "    }",
		  "}"
		]
	},
	
	"Rabin-Karp hashing": {
		"prefix": "rabin",
		"body": [
		  "struct rabin_karp {",
		  "    const ll A, B; vector<ll> h, p;",
		  "    rabin_karp(const string &s, ll a, ll b):",
		  "    A(a), B(b), h(siz(s)), p(siz(s)) { // 1-based string",
		  "        assert(siz(s)), p[0] = 1;",
		  "        rep(i,1,siz(s)-1) {",
		  "            h[i] = (h[i-1]*A+s[i])%B;",
		  "            p[i] = p[i-1]*A%B;",
		  "        }",
		  "    }",
		  "    ll hash(int a, int b) { // closed form",
		  "        assert(a <= b);",
		  "        ll r = (h[b]-h[a-1]*p[b-a+1])%B;",
		  "        return r >= 0 ? r : r+B;",
		  "    }",
		  "};"
		]
	},
	
	"Codeforces Template": {
		"prefix": "cf",
		"body": [
		  "#pragma region orange!orange!orange!orange!",
		  "// g++-12 -std=c++17 -O2 -Wall -Wno-unknown-pragmas -DLOCAL",
		  "#include <bits/stdc++.h>",
		  "#define rep(i,a,b) for (auto i = (a); i <= (b); ++i)",
		  "#define per(i,a,b) for (auto i = (b); i >= (a); --i)",
		  "#define siz(x) int(x.size())",
		  "#define debug(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)",
		  "#define pb push_back",
		  "#define mp make_pair",
		  "#define all(x) (x).begin(), (x).end()",
		  "#define mup(x,y) x = min(x,y)",
		  "#define Mup(x,y) x = max(x,y)",
		  "#define fi first",
		  "#define se second",
		  "using namespace std; using ll = long long; using ii = pair<int,int>; using iii = tuple<int,int,int>;  using vi = vector<int>;",
		  "constexpr int floor_log2(int x) { assert(x > 0); return 31-__builtin_clz(x) ;}",
		  "constexpr int ceil_log2(int x) { assert(x > 0); return 31-__builtin_clz(x)+bool(x&(x-1)); }",
		  "constexpr ll floor(ll p, ll q) { return p/q-((p^q) < 0 and p%q); } constexpr ll ceil(ll p, ll q) { return p/q+((p^q) > 0 and p%q); } string to_string(string s) { return '\"'+s+'\"'; } string to_string(bool b) { return b ? \"true\" : \"false\"; } template <typename A,typename B> string to_string(pair<A,B> p) { return \"(\"+to_string(p.F)+\", \"+to_string(p.S)+\")\"; } template <typename A> string to_string(A v) { bool first = true; string res = \"{\"; for (const auto &x : v) { if (!first) res += \", \"; first = false; res += to_string(x); } res += \"}\"; return res; } void debug_out() { cerr << endl; } template <typename Head,typename... Tail> void debug_out(Head H, Tail... T) { cerr << \" \" << to_string(H); debug_out(T...); } void precalc(); void solution(int);",
		  "int main() {cin.tie(0)->sync_with_stdio(0); precalc(); int t; cin >> t; rep(i,1,t) solution(i);}",
		  "#pragma endregion",
		  "",
		  "void precalc() {}",
		  "void solution(int tc) {",
		  "    $0",
		  "}"
		]
	},

	"Segment Tree for PURQ": {
		"prefix": "purq",
		"body": [
		  "template <class T> struct PURQ {",
		  "    int N; vector<T> t; T (*op)(T,T);",
		  "    void set(int n, T e, T f(T,T)) { N=n, t.resize(2*N,e), op=f; }",
		  "    void update(int k, T v) {",
		  "        assert(0 <= k and k < N);",
		  "        for (t[k += N] ${0:?}= v; (k /= 2) >= 1; t[k] = op(t[2*k],t[2*k+1]));",
		  "    }",
		  "    T query(int a, int b) {",
		  "        assert(0 <= a and a-1 <= b and b < N);",
		  "        T l = t[0], r = t[0];",
		  "        for (a += N, b += N; a <= b; ++a /= 2, --b /= 2) {",
		  "            if (a&1) l = op(l,t[a]);",
		  "            if (~b&1) r = op(t[b],r);",
		  "        }",
		  "        return op(l,r);",
		  "    }",
		  "};"
		],
		"description": "PURQ 구간 트리. 비가환 연산에 대해서도 동작합니다."
	},
	"Segment Tree for RUPQ": {
		"prefix": "rupq",
		"body": [
			"template <class T> struct RUPQ {",
			"    int N; vector<T> t; T (*op)(T,T);",
			"    void set(int n, T e, T f(T,T)) { N=n, t.resize(2*N,e), op=f; }",
			"    void update(int a, int b, T v) {",
			"        assert(0 <= a and a-1 <= b and b < N);",
			"        for (a += N, b += N; a <= b; ++a /= 2, --b /= 2) {",
			"            if (a&1) t[a] = op(t[a],v);",
			"            if (~b&1) t[b] = op(t[b],v);",
			"        }",
			"    }",
			"    T query(int k) {",
			"        assert(0 <= k and k < N);",
			"        T s = t[0];",
			"        for (k += N; k >= 1; k /= 2)",
			"            s = op(s,t[k]);",
			"        return s;",
			"    }",
			"};"
		],
		"description": "RUPQ 구간 트리. 비가환 연산은 지원하지 않습니다."
	 },
	"Segment Tree with Lazy Propagation": {
		"prefix": "lazy",
		"body": [
		  "template <class S, S (*ss)(S,S), class F, F (*ff)(F,F),",
          "          S (*fs)(F,S), const int N = 1<<20> // N=2^k only",
		  "struct RURQ {",
    	  "    S v[2*N]; F z[2*N];",
    	  "    RURQ(S e, F id) { fill(v,v+2*N,e), fill(z,z+2*N,id); }",
    	  "    void push(int k) {",
          "        v[k] = fs(z[k],v[k]);",
          "        if (k < N) z[2*k] = ff(z[2*k],z[k]), z[2*k+1] = ff(z[2*k+1],z[k]);",
          "        z[k] = z[0];",
          "    }",
    	  "    void update(int a, int b, F f, int k = 1, int s = 0, int e = N-1) {",
          "        push(k);",
          "        if (a <= s and e <= b) { z[k] = f, push(k); return; }",
          "        if (b < s or e < a) return;",
          "        update(a,b,f,2*k,s,(s+e)/2), update(a,b,f,2*k+1,(s+e)/2+1,e);",
          "        v[k] = ss(v[2*k],v[2*k+1]);",
          "    }",
    	  "    S query(int a, int b, int k = 1, int s = 0, int e = N-1) {",
          "        push(k);",
          "        if (a <= s and e <= b) return v[k];",
          "        if (b < s or e < a) return v[0];",
          "        return ss(query(a,b,2*k,s,(s+e)/2), query(a,b,2*k+1,(s+e)/2+1,e));",
    	  "    }",
		  "};"
		]
	},

	"Range Sum Query - Fenwick Tree": {
		"prefix": "fenwick",
		"body": [
			"ll t[N+1] {0,};",
    		"void add(int k, ll x) {",
			"    assert(0 <= k and k < N);",
        	"    for (++k; k <= N; k += k&-k) t[k] += x;",
    		"}",
    		"ll sum(int l, int r) {",
        	"    assert(0 <= l and l <= r and r < N);",
			"    ll s = 0;",
			"    for (++r; r >= 1; r -= r&-r) s += t[r];",
			"    for (; l >= 1; l -= l&-l) s -= t[l];",
        	"    return s;",
    		"}"
		]
	},

	"Disjoint Set Union": {
		"prefix": "dsu",
		"body": [
		  "template <const int N>",
		  "struct disjoint_set {",
		  "    int p[N], s[N];",
		  "    disjoint_set() { iota(p,p+N,0), fill(s,s+N,1); }",
		  "    int find(int x) {",
		  "        assert(x < N);",
		  "        if (x == p[x]) return x;",
		  "        return p[x] = find(p[x]);",
		  "    }",
		  "    void merge(int a, int b) {",
		  "        a = find(a), b = find(b);",
		  "        assert(a != b);",
		  "        if (s[a] > s[b]) swap(a,b);",
		  "        s[b] += s[a], p[a] = b;",
		  "    }",
		  "    int size(int x) {",
		  "        return s[find(x)];",
		  "    }",
		  "    bool same(int a, int b) {",
		  "        return find(a) == find(b);",
		  "    }",
		  "};"
		]
	},
	"Convex hull trick": {
		"prefix": "cht",
		"body": [
		  "template <class T = int64_t, class U = __int128_t>",
		  "struct CHT {",
		  "    struct line {",
		  "        T a, b;",
		  "        T operator ()(T x) { return a*x+b; }",
		  "    };",
		  "    vector<line> d;",
		  "    int e=-1;",
		  "    bool ok(line x, line y, line z) {",
		  "        return U(x.b-z.b)*(y.a-x.a) <= U(x.b-y.b)*(z.a-x.a);",
		  "    }",
		  "    void insert(line l) {",
		  "        while (e >= 1 and ok(d[e-1],d[e],l)) d.pop_back(), e--;",
		  "        d.push_back(l), e++;",
		  "    }",
		  "    T get(T x) {",
		  "        assert(size(d));",
		  "        int a = 0, b = e-1, m;",
		  "        while (a <= b) {",
		  "            m = (a+b)/2;",
		  "            if (d[m](x) < d[m+1](x)) a = m+1;",
		  "            else b = m-1;",
		  "        }",
		  "        return d[a](x);",
		  "    }",
		  "};"
		]
	},
	
	"Suffix array & LCP": {
		"prefix": "sa",
		"body": [
		  "vi suffix_array(const string &s) {",
		  "    int n=siz(s);",
		  "    vi t(n), a(n), b(n);",
		  "    rep(i,0,n-1) t[i]=i, b[i]=s[i];",
		  "    for (int k=1; k<n; k*=2, b=a) {",
		  "        auto cmp=[&](int x, int y){ return ii(b[x],x+k<n ? b[x+k]:-1) < ii(b[y],y+k<n ? b[y+k]:-1); };",
		  "        sort(begin(t),end(t),cmp);",
		  "        a[t[0]]=0;",
		  "        rep(i,1,n-1) a[t[i]]=a[t[i-1]]+cmp(t[i-1],t[i]);",
		  "    }",
		  "    return t;",
		  "}",
		  "",
		  "vi longest_common_prefix(const string &s, const vi &sa) {",
		  "    int n=siz(s), v=0;",
		  "    vi r(n), lcp(n-1);",
		  "    rep(i,0,n-1) r[sa[i]]=i;",
		  "    rep(i,0,n-1) if (r[i]>0) {",
		  "        int x=sa[r[i]], y=sa[r[i]-1];",
		  "        while (x+v<n && s[x+v]==s[y+v]) v++;",
		  "        lcp[r[i]-1]=v;",
		  "        v?v--:0;",
		  "    }",
		  "    return lcp;",
		  "}"
		],
	},

	"(n choose k) mod P": {
		"prefix": "comb",
		"body": [
			"const int f_size = $0;",
			"mint fac[f_size+1], caf[f_size+1];",
			"void precalc() {",
			"    fac[0] = 1;",
			"    rep(i,1,f_size) fac[i] = fac[i-1]*i;",
			"    caf[f_size] = inv(fac[f_size]);",
			"    per(i,1,f_size) caf[i-1] = i*caf[i];",
			"}",
			"mint C(int n, int k) {",
			"    if (k < 0 or n < k) return 0;",
			"    return fac[n]*caf[k]*caf[n-k];",
			"}",
			"mint P(int n, int k) { return C(n,k)*fac[k]; }",
			"mint F(int n) { return fac[n]; }",
			"mint H(int n, int k) { return C(n-1+k,k); }",
			"    precalc();"
		  ]
	},
	
	"power": {
		"prefix": "power",
		"body": [
			"template <typename T>",
			"T pw(T x, ll e) {",
			"    T r = ${0:1};",
			"    while (e > 0) {",
			"        if (e%2) r = r*x;",
			"        e /= 2, x = x*x;",
			"    }",
			"    return r;",
			"}"
		  ]
	},

	"Grid Tour with Graph Traversal" : {
		"prefix": "gridtour",
		"body": [
			"const ii d4[] {{0,1},{1,0},{0,-1},{-1,0}};",
			"const ii d8[] {{0,1},{1,0},{0,-1},{-1,0},{1,1},{1,-1},{-1,1},{-1,-1}};",
			"bool out(int x, int y) {return 1 > x or x > ${1:r} or 1 > y or y > ${2:c};}"
		]
	},

	"Heavy Light Decomposition": {
		"prefix": "hld",
		"body": [
		  "template <typename T, const int N>",
		  "struct HLD {",
		  "    int sub[N], lev[N], par[N], top[N], in[N], out[N];",
		  "    PURQ<T,N> seg; T id; T (*op)(T,T);",
		  "    void dfs1(vi child[], int s = 1) {",
		  "        sub[s] = 1;",
		  "        for (auto &u : child[s]) { // 주의",
		  "            lev[u] = lev[s]+1, par[u] = s, dfs1(child,u), sub[s] += sub[u];",
		  "            if (sub[u] > sub[child[s][0]]), swap(u,child[s][0]);",
		  "        }",
		  "    }",
		  "    int cnt = 0; // 주의",
		  "    void dfs2(vi child[], int s = 1) {",
		  "        in[s] = ++cnt;",
		  "        for (auto u : child[s]) {",
		  "            top[u] = u == child[s][0] ? top[s] : u;",
		  "            dfs2(child,u);",
		  "        }",
		  "        out[s] = cnt;",
		  "    }",
		  "    HLD(vi c[], T e, T f(T,T)): seg(e,f), id(e), op(f) { dfs1(c), dfs2(c); }",
		  "    void update(int k, T v) { seg.update(in[k],v); }",
		  "    T query(int a, int b) {",
		  "        T ret = id;",
		  "        while (top[a] != top[b]) {",
		  "            if (lev[top[a]] < lev[top[b]]) swap(a,b);",
		  "            ret = op(ret,seg.query(in[top[a]],in[a]));",
		  "            a = par[top[a]];",
		  "        }",
		  "        if (lev[a] > lev[b]) swap(a,b);",
		  "        return op(ret,seg.query(in[a],in[b]));",
		  "    }",
		  "};",
		  "",
		  "// void to_direct(int s = 1, int e = 0) {",
		  "//     for (auto u : adj[s]) if (u != e)",
		  "//         child[s].push_back(u), to_direct(u,s);",
		  "// }"
		]
	},
	
	"Computational Geometry Template": {
		"prefix": "geo",
		"body": [
		  "#pragma region Geometry",
		  "using P = complex<ll>; using ld = long double; using Poly = vector<P>;",
		  "const ld PI = acos(-1.0L), TAU = 2*PI;",
		  "#define X real()",
		  "#define Y imag()",
		  "inline ll dot(P u, P v) { return (conj(u)*v).X; }",
		  "inline ll cross(P u, P v) { return (conj(u)*v).Y; }",
		  "inline ll norm(P u) { return dot(u,u); }",
		  "inline int ccw(P a, P b, P c) {",
		  "    auto v = cross(b-a,c-b);",
		  "    if (v < 0) return -1;",
		  "    else if (v > 0) return 1;",
		  "    return 0;",
		  "}",
		  "inline ld abs(P u) {return sqrt(ld(norm(u)));}",
		  "istream &operator >> (istream &is, P &p) {ll x, y; is >> x >> y; p = {x,y}; return is;}",
		  "namespace std { bool operator < (const P &u, const P &v) {return u.X == v.X ? u.Y < v.Y : u.X < v.X;} }",
		  "#pragma endregion"
		]
	},
	
	"Line Segment": {
		"prefix": "segment",
		"body": [
		  "struct Segment {",
		  "    P a, b;",
		  "    void sort() {if (b < a) swap(a,b);}",
		  "    friend bool operator == (Segment s1, Segment s2) {",
		  "        s1.sort(), s2.sort();",
		  "        return s1.a == s2.a and s1.b == s2.b;",
		  "    }",
		  "    friend bool intersect(Segment s1, Segment s2) {",
		  "        s1.sort(), s2.sort();",
		  "        int c1 = ccw(s1.a,s2.a,s1.b)*ccw(s1.a,s2.b,s1.b);",
		  "        int c2 = ccw(s2.a,s1.a,s2.b)*ccw(s2.a,s1.b,s2.b);",
		  "        if (c1 or c2) return c1 <= 0 and c2 <= 0;",
		  "        else return not(s1.b < s2.a or s2.b < s1.a);",
		  "    }",
		  "};"
		]
	},
	  
	"Convex Hull - Monotone Chain": {
		"prefix": "convex",
		"body": [
		  "Poly convex_hull(vector<P> &p) {",
		  "    sort(p.begin(),p.end());",
		  "    Poly up(siz(p)), lo(siz(p));",
		  "    int u = 0, l = 0, i = 0, j = siz(p)-1;",
		  "    rep(_,1,siz(p)) {",
		  "        while (u >= 2 and ccw(up[u-2],up[u-1],p[i]) >= 0) --u;",
		  "        while (l >= 2 and ccw(lo[l-2],lo[l-1],p[j]) >= 0) --l;",
		  "        up[u++] = p[i++], lo[l++] = p[j--];",
		  "    }",
		  "    up.resize(u-1), lo.resize(l-1);",
		  "    up.insert(up.end(),lo.begin(),lo.end());",
		  "    return up;",
		  "}"
		]
	},
	  
	"Dinic's algorithm": {
		"prefix": "maxflow",
		"body": [
		  "template <const int V, typename T, const T INF>",
		  "struct max_flow {",
		  "    vector<int> adj[V], ldj[V];",
		  "    int src, snk, dist[V]{};",
		  "    T res[V][V]{};",
		  "    max_flow(int s, int t): src(s), snk(t) {}",
		  "    void add(int u, int v, T f) {",
		  "        res[u][v] += f;",
		  "        if (f == 0 or res[u][v] > f or res[v][u] > 0) return;",
		  "        adj[u].push_back(v), adj[v].push_back(u);",
		  "    }",
		  "    T augment(int s, T a=INF) {",
		  "        if (s == snk) return a;",
		  "        for (;not ldj[s].empty(); ldj[s].pop_back()) {",
		  "            int u = ldj[s].back();",
		  "            if (!res[s][u]) continue;",
		  "            T r = augment(u, min(a,res[s][u]));",
		  "            if (r > 0) {",
		  "                res[s][u] -= r;",
		  "                res[u][s] += r;",
		  "                return r;",
		  "            }",
		  "        }",
		  "        return 0;",
		  "    }",
		  "    bool build() {",
		  "        queue<int> q;",
		  "        rep(i,0,V-1) ldj[i].clear(), dist[i]=1e9;",
		  "        dist[src]=0, q.push(src);",
		  "        while (not q.empty()) {",
		  "            int s = q.front(); q.pop();",
		  "            for (auto u : adj[s]) if (res[s][u] > 0) {",
		  "                if (dist[u] == int(1e9)) dist[u] = dist[s]+1, q.push(u);",
		  "                if (dist[u] == dist[s]+1) ldj[s].push_back(u);",
		  "            }",
		  "        }",
		  "        return dist[snk] != int(1e9);",
		  "    }",
		  "    T get() {",
		  "        T r=0;",
		  "        while (build()) for (T d; (d=augment(src)); r += d);",
		  "        return r;",
		  "    }",
		  "};"
		]
	},
	  
	"Hopcroft-Karp algorithm": {
		"prefix": "bipartite",
		"body": [
		  "int bipartite_matching() {",
		  "    int L[N]{}, R[N]{}, lev[N]{};",
		  "    auto build = [&]() {",
		  "        fill(lev,lev+n+1,0); queue<int> q;",
		  "        rep(i,1,n) if (!R[i]) lev[i] = 1, q.push(i);",
		  "        while (not empty(q)) {",
		  "            int s = q.front(); q.pop();",
		  "            for (auto u : adj[s]) if (u != R[s]) {",
		  "                int v = L[u];",
		  "                if (!v or lev[v]) continue;",
		  "                lev[v] = lev[s]+1;",
		  "                q.push(v);",
		  "            }",
		  "        }",
		  "    };",
		  "    function<bool(int)> matched = [&](int s) -> bool {",
		  "        for (auto u : adj[s]) {",
		  "            int v = L[u];",
		  "            if (!v or (lev[s]+1 == lev[v] and matched(v))) {",
		  "                R[s] = u, L[u] = s;",
		  "                return true;",
		  "            }",
		  "        }",
		  "        return false;",
		  "    };",
		  "    int res = 0;",
		  "    while (true) {",
		  "        build();",
		  "        int inc = 0;",
		  "        rep(i,1,n) if (!R[i]) {",
		  "            inc += matched(i);",
		  "        }",
		  "        if (!inc) return res;",
		  "        res += inc;",
		  "    }",
		  "}"
		]
	},
	  
	"Modular arithmetic": {
		"prefix": "mod",
		"body": [
		  "#pragma region modnum template from ecnerwala/cp-book",
		  "// https://github.com/ecnerwala/cp-book/blob/master/src/modnum.hpp",
		  "template <typename T> T mod_inv_in_range(T a, T m) {",
		  "    // assert(0 <= a && a < m);",
		  "    T x = a, y = m;",
		  "    T vx = 1, vy = 0;",
		  "    while (x) {",
		  "        T k = y / x;",
		  "        y %= x;",
		  "        vy -= k * vx;",
		  "        std::swap(x, y);",
		  "        std::swap(vx, vy);",
		  "    }",
		  "    assert(y == 1);",
		  "    return vy < 0 ? m + vy : vy;",
		  "}",
		  "",
		  "template <typename T> T mod_inv(T a, T m) {",
		  "    a %= m;",
		  "    a = a < 0 ? a + m : a;",
		  "    return mod_inv_in_range(a, m);",
		  "}",
		  "",
		  "template <int MOD_> struct modnum {",
		  "    static constexpr int MOD = MOD_;",
		  "    static_assert(MOD_ > 0, \"MOD must be positive\");",
		  "",
		  "private:",
		  "    int v;",
		  "",
		  "public:",
		  "",
		  "    modnum() : v(0) {}",
		  "    modnum(int64_t v_) : v(int(v_ % MOD)) { if (v < 0) v += MOD; }",
		  "    explicit operator int() const { return v; }",
		  "    friend std::ostream& operator << (std::ostream& out, const modnum& n) { return out << int(n); }",
		  "    friend std::istream& operator >> (std::istream& in, modnum& n) { int64_t v_; in >> v_; n = modnum(v_); return in; }",
		  "",
		  "    friend bool operator == (const modnum& a, const modnum& b) { return a.v == b.v; }",
		  "    friend bool operator != (const modnum& a, const modnum& b) { return a.v != b.v; }",
		  "",
		  "    modnum inv() const {",
		  "        modnum res;",
		  "        res.v = mod_inv_in_range(v, MOD);",
		  "        return res;",
		  "    }",
		  "    friend modnum inv(const modnum& m) { return m.inv(); }",
		  "    modnum neg() const {",
		  "        modnum res;",
		  "        res.v = v ? MOD-v : 0;",
		  "        return res;",
		  "    }",
		  "    friend modnum neg(const modnum& m) { return m.neg(); }",
		  "",
		  "    modnum operator- () const {",
		  "        return neg();",
		  "    }",
		  "    modnum operator+ () const {",
		  "        return modnum(*this);",
		  "    }",
		  "",
		  "    modnum& operator ++ () {",
		  "        v ++;",
		  "        if (v == MOD) v = 0;",
		  "        return *this;",
		  "    }",
		  "    modnum& operator -- () {",
		  "        if (v == 0) v = MOD;",
		  "        v --;",
		  "        return *this;",
		  "    }",
		  "    modnum& operator += (const modnum& o) {",
		  "        v -= MOD-o.v;",
		  "        v = (v < 0) ? v + MOD : v;",
		  "        return *this;",
		  "    }",
		  "    modnum& operator -= (const modnum& o) {",
		  "        v -= o.v;",
		  "        v = (v < 0) ? v + MOD : v;",
		  "        return *this;",
		  "    }",
		  "    modnum& operator *= (const modnum& o) {",
		  "        v = int(int64_t(v) * int64_t(o.v) % MOD);",
		  "        return *this;",
		  "    }",
		  "    modnum& operator /= (const modnum& o) {",
		  "        return *this *= o.inv();",
		  "    }",
		  "",
		  "    friend modnum operator ++ (modnum& a, int) { modnum r = a; ++a; return r; }",
		  "    friend modnum operator -- (modnum& a, int) { modnum r = a; --a; return r; }",
		  "    friend modnum operator + (const modnum& a, const modnum& b) { return modnum(a) += b; }",
		  "    friend modnum operator - (const modnum& a, const modnum& b) { return modnum(a) -= b; }",
		  "    friend modnum operator * (const modnum& a, const modnum& b) { return modnum(a) *= b; }",
		  "    friend modnum operator / (const modnum& a, const modnum& b) { return modnum(a) /= b; }",
		  "};",
		  "#pragma endregion modnum template",
		  "using mint = modnum<>;",
		  "mint pw(mint x, ll e) {",
		  "    mint r = 1;",
		  "    while (e > 0) {",
		  "        if (e%2) r = r*x;",
		  "        e /= 2, x = x*x;",
		  "    }",
		  "    return r;",
		  "}"
		]
	},

	"Modular arithmetic - dynamic M": {
		"prefix": "dynamic",
		"body": [
			"#pragma region dynamic_modnum template",
			"template <typename T> T pow(T a, long long b) {",
			"    assert(b >= 0);",
			"    T r = 1; while (b) { if (b & 1) r *= a; b >>= 1; a *= a; } return r;",
			"}",
			"",
			"template <int tag> struct dynamic_modnum {",
			"private:",
			"#if __cpp_inline_variables >= 201606",
			"    // C++17 and up",
			"    inline static int MOD_ = 0;",
			"    // Only for [GNU C++20(64)]",
			"    // inline static uint64_t BARRETT_M = 0;",
			"#else",
			"    // NB: these must be initialized out of the class by hand:",
			"    //   static int dynamic_modnum<tag>::MOD = 0;",
			"    //   static int dynamic_modnum<tag>::BARRETT_M = 0;",
			"    static int MOD_;",
			"    static uint64_t BARRETT_M;",
			"#endif",
			"",
			"public:",
			"    // Make only the const-reference public, to force the use of set_mod",
			"    static constexpr int const& MOD = MOD_;",
			"",
			"    // Barret reduction taken from KACTL:",
			"    /**",
			"     * Author: Simon Lindholm",
			"     * Date: 2020-05-30",
			"     * License: CC0",
			"     * Source: https://en.wikipedia.org/wiki/Barrett_reduction",
			"     * Description: Compute a \\% b$ about 5 times faster than usual, where b$ is constant but not known at compile time.",
			"     * Returns a value congruent to a \\pmod b$ in the range $[0, 2b)$.",
			"     * Status: proven correct, stress-tested",
			"     * Measured as having 4 times lower latency, and 8 times higher throughput, see stress-test.",
			"     * Details:",
			"     * More precisely, it can be proven that the result equals 0 only if a = 0$,",
			"     * and otherwise lies in $[1, (1 + a/2^64) * b)$.",
			"     */",
			"    static void set_mod(int mod) {",
			"        assert(mod > 0);",
			"        MOD_ = mod;",
			"        // Only for [GNU C++20(64)]",
			"        // BARRETT_M = (uint64_t(-1) / MOD);",
			"    }",
			"    // Only for [GNU C++20(64)]",
			"    // static uint32_t barrett_reduce_partial(uint64_t a) {",
			"    //     return uint32_t(a - uint64_t((__uint128_t(BARRETT_M) * a) >> 64) * MOD);",
			"    // }",
			"    // static int barrett_reduce(uint64_t a) {",
			"    //     int32_t res = int32_t(barrett_reduce_partial(a) - MOD);",
			"    //     return (res < 0) ? res + MOD : res;",
			"    // }",
			"",
			"    struct mod_reader {",
			"        friend std::istream& operator >> (std::istream& i, mod_reader) {",
			"            int mod; i >> mod;",
			"            dynamic_modnum::set_mod(mod);",
			"            return i;",
			"        }",
			"    };",
			"    static mod_reader MOD_READER() {",
			"        return mod_reader();",
			"    }",
			"",
			"private:",
			"    int v;",
			"",
			"public:",
			"",
			"    dynamic_modnum() : v(0) {}",
			"    dynamic_modnum(int64_t v_) : v(int(v_ % MOD)) { if (v < 0) v += MOD; }",
			"    explicit operator int() const { return v; }",
			"    friend std::ostream& operator << (std::ostream& out, const dynamic_modnum& n) { return out << int(n); }",
			"    friend std::istream& operator >> (std::istream& in, dynamic_modnum& n) { int64_t v_; in >> v_; n = dynamic_modnum(v_); return in; }",
			"",
			"    friend bool operator == (const dynamic_modnum& a, const dynamic_modnum& b) { return a.v == b.v; }",
			"    friend bool operator != (const dynamic_modnum& a, const dynamic_modnum& b) { return a.v != b.v; }",
			"",
			"    dynamic_modnum inv() const {",
			"        dynamic_modnum res;",
			"        res.v = mod_inv_in_range(v, MOD);",
			"        return res;",
			"    }",
			"    friend dynamic_modnum inv(const dynamic_modnum& m) { return m.inv(); }",
			"    dynamic_modnum neg() const {",
			"        dynamic_modnum res;",
			"        res.v = v ? MOD-v : 0;",
			"        return res;",
			"    }",
			"    friend dynamic_modnum neg(const dynamic_modnum& m) { return m.neg(); }",
			"",
			"    dynamic_modnum operator- () const {",
			"        return neg();",
			"    }",
			"    dynamic_modnum operator+ () const {",
			"        return dynamic_modnum(*this);",
			"    }",
			"",
			"    dynamic_modnum& operator ++ () {",
			"        v ++;",
			"        if (v == MOD) v = 0;",
			"        return *this;",
			"    }",
			"    dynamic_modnum& operator -- () {",
			"        if (v == 0) v = MOD;",
			"        v --;",
			"        return *this;",
			"    }",
			"    dynamic_modnum& operator += (const dynamic_modnum& o) {",
			"        v -= MOD-o.v;",
			"        v = (v < 0) ? v + MOD : v;",
			"        return *this;",
			"    }",
			"    dynamic_modnum& operator -= (const dynamic_modnum& o) {",
			"        v -= o.v;",
			"        v = (v < 0) ? v + MOD : v;",
			"        return *this;",
			"    }",
			"    dynamic_modnum& operator *= (const dynamic_modnum& o) {",
			"        // Only for [GNU C++20(64)]",
			"        // v = barrett_reduce(int64_t(v) * int64_t(o.v));",
			"        v = int(int64_t(v) * int64_t(o.v) % MOD);",
			"        return *this;",
			"    }",
			"    dynamic_modnum& operator /= (const dynamic_modnum& o) {",
			"        return *this *= o.inv();",
			"    }",
			"",
			"    friend dynamic_modnum operator ++ (dynamic_modnum& a, int) { dynamic_modnum r = a; ++a; return r; }",
			"    friend dynamic_modnum operator -- (dynamic_modnum& a, int) { dynamic_modnum r = a; --a; return r; }",
			"    friend dynamic_modnum operator + (const dynamic_modnum& a, const dynamic_modnum& b) { return dynamic_modnum(a) += b; }",
			"    friend dynamic_modnum operator - (const dynamic_modnum& a, const dynamic_modnum& b) { return dynamic_modnum(a) -= b; }",
			"    friend dynamic_modnum operator * (const dynamic_modnum& a, const dynamic_modnum& b) { return dynamic_modnum(a) *= b; }",
			"    friend dynamic_modnum operator / (const dynamic_modnum& a, const dynamic_modnum& b) { return dynamic_modnum(a) /= b; }",
			"};",
			"#pragma endregion dynamic_modnum template"
		]
	},
	  
	"Fast I/O": {
		"prefix": "fast",
		"body": [
		  "#pragma region FastIO",
		  "/*",
		  " * Author : jinhan814",
		  " * Date : 2021-05-05",
		  " * Source : https://blog.naver.com/jinhan814/222266396476",
		  " * Description : FastIO implementation for cin, cout.",
		  " */",
		  "constexpr int SZ = 1 << 20;",
		  "",
		  "class INPUT {",
		  "private:",
		  "    char read_buf[SZ];",
		  "    int read_idx, next_idx;",
		  "    bool __END_FLAG__, __GETLINE_FLAG__;",
		  "public:",
		  "    explicit operator bool() { return !__END_FLAG__; }",
		  "    bool IsBlank(char c) { return c == ' ' || c == '\\n'; }",
		  "    bool IsEnd(char c) { return c == '\\0'; }",
		  "    char _ReadChar() {",
		  "        if (read_idx == next_idx) {",
		  "            next_idx = fread(read_buf, sizeof(char), SZ, stdin);",
		  "            if (next_idx == 0) return 0;",
		  "            read_idx = 0;",
		  "        }",
		  "        return read_buf[read_idx++];",
		  "    }",
		  "    char ReadChar() {",
		  "        char ret = _ReadChar();",
		  "        for (; IsBlank(ret); ret = _ReadChar());",
		  "        return ret;",
		  "    }",
		  "    template<typename T> T ReadInt() {",
		  "        T ret = 0; char cur = _ReadChar(); bool flag = 0;",
		  "        for (; IsBlank(cur); cur = _ReadChar());",
		  "        if (cur == '-') flag = 1, cur = _ReadChar();",
		  "        for (; !IsBlank(cur) && !IsEnd(cur); cur = _ReadChar()) ret = 10 * ret + (cur & 15);",
		  "        if (IsEnd(cur)) __END_FLAG__ = 1;",
		  "        return flag ? -ret : ret;",
		  "    }",
		  "    string ReadString() {",
		  "        string ret; char cur = _ReadChar();",
		  "        for (; IsBlank(cur); cur = _ReadChar());",
		  "        for (; !IsBlank(cur) && !IsEnd(cur); cur = _ReadChar()) ret.push_back(cur);",
		  "        if (IsEnd(cur)) __END_FLAG__ = 1;",
		  "        return ret;",
		  "    }",
		  "    double ReadDouble() {",
		  "        string ret = ReadString();",
		  "        return stod(ret);",
		  "    }",
		  "    string getline() {",
		  "        string ret; char cur = _ReadChar();",
		  "        for (; cur != '\\n' && !IsEnd(cur); cur = _ReadChar()) ret.push_back(cur);",
		  "        if (__GETLINE_FLAG__) __END_FLAG__ = 1;",
		  "        if (IsEnd(cur)) __GETLINE_FLAG__ = 1;",
		  "        return ret;",
		  "    }",
		  "    friend INPUT& getline(INPUT& in, string& s) { s = in.getline(); return in; }",
		  "} _in;",
		  "",
		  "class OUTPUT {",
		  "private:",
		  "    char write_buf[SZ];",
		  "    int write_idx;",
		  "public:",
		  "    ~OUTPUT() { Flush(); }",
		  "    explicit operator bool() { return 1; }",
		  "    void Flush() {",
		  "        fwrite(write_buf, sizeof(char), write_idx, stdout);",
		  "        write_idx = 0;",
		  "    }",
		  "    void WriteChar(char c) {",
		  "        if (write_idx == SZ) Flush();",
		  "        write_buf[write_idx++] = c;",
		  "    }",
		  "    template<typename T> int GetSize(T n) {",
		  "        int ret = 1;",
		  "        for (n = n >= 0 ? n : -n; n >= 10; n /= 10) ret++;",
		  "        return ret;",
		  "    }",
		  "    template<typename T> void WriteInt(T n) {",
		  "        int sz = GetSize(n);",
		  "        if (write_idx + sz >= SZ) Flush();",
		  "        if (n < 0) write_buf[write_idx++] = '-', n = -n;",
		  "        for (int i = sz; i-- > 0; n /= 10) write_buf[write_idx + i] = n % 10 | 48;",
		  "        write_idx += sz;",
		  "    }",
		  "    void WriteString(string s) { for (auto& c : s) WriteChar(c); }",
		  "    void WriteDouble(double d) { WriteString(to_string(d)); }",
		  "} _out;",
		  "",
		  "/* operators */",
		  "INPUT& operator>> (INPUT& in, char& i) { i = in.ReadChar(); return in; }",
		  "INPUT& operator>> (INPUT& in, string& i) { i = in.ReadString(); return in; }",
		  "template<typename T, typename std::enable_if_t<is_arithmetic_v<T>>* = nullptr>",
		  "INPUT& operator>> (INPUT& in, T& i) {",
		  "    if constexpr (is_floating_point_v<T>) i = in.ReadDouble();",
		  "    else if constexpr (is_integral_v<T>) i = in.ReadInt<T>();",
		  "    return in;",
		  "}",
		  "",
		  "OUTPUT& operator<< (OUTPUT& out, char i) { out.WriteChar(i); return out; }",
		  "OUTPUT& operator<< (OUTPUT& out, string i) { out.WriteString(i); return out; }",
		  "template<typename T, typename std::enable_if_t<is_arithmetic_v<T>>* = nullptr>",
		  "OUTPUT& operator<< (OUTPUT& out, T i) {",
		  "    if constexpr (is_floating_point_v<T>) out.WriteDouble(i);",
		  "    else if constexpr (is_integral_v<T>) out.WriteInt<T>(i); ",
		  "    return out;",
		  "}",
		  "",
		  "/* macros */",
		  "#define fastio 1",
		  "#define cin _in",
		  "#define cout _out",
		  "#define istream INPUT",
		  "#define ostream OUTPUT",
		  "#pragma endregion FastIO"
		],
		"description": "Fast I/O"
	}
}
